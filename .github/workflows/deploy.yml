name: Deploy to ECS

on:
  push:
    branches:
      - master

jobs:
  deploy:
    name: Deploy to ECS Fargate
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set image tag
        run: echo "IMAGE_TAG=latest" >> $GITHUB_ENV

      - name: Build, tag, and push Docker image to ECR
        run: |
          IMAGE_URI=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
          docker build -t $IMAGE_URI .
          docker push $IMAGE_URI

      - name: Inject secrets into ECS task definition
        run: |
          sed "s|{{AWS_ACCOUNT_ID}}|${{ secrets.AWS_ACCOUNT_ID }}|g" ecs-task-def-template.json > ecs-task-def.json
          sed -i "s|{{OPENAI_API_KEY}}|${{ secrets.OPENAI_API_KEY }}|g" ecs-task-def.json

      - name: Render new ECS task definition with updated image
        id: render-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ecs-task-def.json
          container-name: resume-container
          image: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}

      - name: Deploy to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          cluster: ${{ secrets.ECS_CLUSTER_NAME }}
          service: ${{ secrets.ECS_SERVICE_NAME }}
          task-definition: ${{ steps.render-task-def.outputs.task-definition }}
          wait-for-service-stability: true
